package chap16_usefulclass;

public class _07_StringBuffer02 {

	public static void main(String[] args) {
		StringBuffer sb1 = new StringBuffer(100);
		StringBuffer sb2 = new StringBuffer("bitcamp");
		StringBuffer sb3 = new StringBuffer();
		
		// 1. append: 기존 StringBuffer에 새로운 문자열을 추가하여 StringBuffer 타입으로 리턴
		// StringBuffer의 append는 원본 데이터를 수정한다.
		// sb1에 저장되어 있던 문자열이 수정된다.
		sb1.append("navercloud");
		
		System.out.println(sb1);
		
		sb3.append("bitcamp");
		
		System.out.println(sb3);
		
		// String은 원본 데이터는 수정되지 않는다.
		// str에 저장되어 있는 문자열은 그대로 유지된다.
		String str = "";
		str.concat("navercloud");
		System.out.println(str);
		
		// 2. capacity: 버퍼의 크기를 리턴
		//    length: StringBuffer에 저장되어 있는 문자열의 길이
		System.out.println(sb1.capacity());
		System.out.println(sb1.length());
		
		// sb2는 생성할 때 문자열 길이 + 16 크기만큼 버퍼의 크기로 잡힌다.
		System.out.println(sb2.capacity());
		System.out.println(sb2.length());
		
		// sb3는 16크기의 버퍼를 생성해서 append 메소드로 문자열을 추가했기 때문에
		// 버퍼의 크기는 늘어나지 않고 문자열이 추가된다.
		// 버퍼의 크기인 16보다 긴 문자열을 append 하면 자동으로 문자열의 길이에 맞춰서
		// 버퍼의 크기가 증가한다.
		System.out.println(sb3.capacity());
		System.out.println(sb3.length());
		
		// 3. StringBuffer에 남아있는 버퍼의 크기
		int remainBufferSize = sb1.capacity() - sb1.length();
		
		for(int i = 0; i < remainBufferSize; i++) {
			sb1.append("a");
		}
		
		System.out.println(sb1);
		
		// 4. delete: 매개변수로 주어진 시작 인덱스부터 끝 인덱스까지의 문자열을 삭제한 새로운 StringBuffer 리턴
		
		
		
		
		
		
		
		
		
	}

}
